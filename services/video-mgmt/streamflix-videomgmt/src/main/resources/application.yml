spring:
  application:
    name: video-management-service
  profiles:
    active: dev
  datasource:
    primary:
      hikari:
        jdbc-url: '''jdbc:postgresql://localhost:5432/streamflix_videomgmt_primary''' # Replace with your primary DB URL
        username: '''${DB_USERNAME:postgres}'''
        password: '''${DB_PASSWORD:password}'''
        driver-class-name: org.postgresql.Driver
        pool-name: HikariPool-Primary
        maximum-pool-size: '''${DB_PRIMARY_MAX_POOL_SIZE:10}''' # Example: 10 for primary
        minimum-idle: '''${DB_PRIMARY_MIN_IDLE:5}'''
    replica:
      hikari:
        jdbc-url: '''jdbc:postgresql://localhost:5433/streamflix_videomgmt_replica''' # Replace with your replica DB URL
        username: '''${DB_REPLICA_USERNAME:${DB_USERNAME:postgres}}''' # Can use same or different credentials
        password: '''${DB_REPLICA_PASSWORD:${DB_PASSWORD:password}}'''
        driver-class-name: org.postgresql.Driver
        pool-name: HikariPool-Replica
        maximum-pool-size: '''${DB_REPLICA_MAX_POOL_SIZE:20}''' # Example: 20 for replica (more read load)
        minimum-idle: '''${DB_REPLICA_MIN_IDLE:10}'''
        read-only: true # Important for replica
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        # Add tenant filtering to queries
        session_factory:
          interceptor: com.streamflix.video.infrastructure.multitenancy.TenantInterceptor
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: video-management-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  
  # Spring Cloud Stream Configuration
  cloud:
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_BROKERS:localhost:9092}
      bindings:
        video-created-out:
          destination: ${kafka.topics.video-created}
          content-type: application/json
        video-updated-out:
          destination: ${kafka.topics.video-updated}
          content-type: application/json
        video-deleted-out:
          destination: ${kafka.topics.video-deleted}
          content-type: application/json
        video-status-changed-out:
          destination: ${kafka.topics.video-status-changed}
          content-type: application/json
        video-processing-requested-out:
          destination: ${kafka.topics.video-processing-requested}
          content-type: application/json
  cache:
    type: redis
  redis:
    # host: ${REDIS_HOST:localhost} # Replaced by cluster configuration
    # port: ${REDIS_PORT:6379}   # Replaced by cluster configuration
    timeout: 2000
    cluster:
      nodes:
        - ${REDIS_CLUSTER_NODE_1_HOST:localhost}:${REDIS_CLUSTER_NODE_1_PORT:7000}
        - ${REDIS_CLUSTER_NODE_2_HOST:localhost}:${REDIS_CLUSTER_NODE_2_PORT:7001}
        - ${REDIS_CLUSTER_NODE_3_HOST:localhost}:${REDIS_CLUSTER_NODE_3_PORT:7002}
        # Add more nodes as needed
      max-redirects: ${REDIS_CLUSTER_MAX_REDIRECTS:5}
  
server:
  port: 8080
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 1024 # Compress responses larger than 1KB

management:
  metrics:
    export:
      prometheus:
        enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,loggers
      base-path: /actuator
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    health:
      show-details: always
      show-components: always
      status:
        order: DOWN, OUT_OF_SERVICE, UNKNOWN, UP
      group:
        liveness:
          include: ping, diskSpace, threadPool, memory
        readiness:
          include: db, redis, kafka, s3
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    kafka:
      enabled: true
    redis:
      enabled: true
    db:
      enabled: true

# Custom Kafka topic configuration
kafka:
  topics:
    video-created: streamflix.videos.created
    video-updated: streamflix.videos.updated
    video-deleted: streamflix.videos.deleted
    video-status-changed: streamflix.videos.status-changed
    video-processing-requested: streamflix.videos.processing-requested

# S3 storage configuration
cloud:
  aws:
    s3:
      endpoint: ${S3_ENDPOINT:http://localhost:9000}
      region: ${S3_REGION:us-east-1}
      bucket-name: ${S3_BUCKET_NAME:streamflix-videos}
      access-key: ${S3_ACCESS_KEY:minioadmin}
      secret-key: ${S3_SECRET_KEY:minioadmin}
      presigned-url-expiration: ${S3_PRESIGNED_URL_EXPIRATION:3600}

# Security configuration
streamflix:
  security:
    jwt:
      secret: ${JWT_SECRET:supersecretkeythatshouldbesecure}
      expiration: 86400000  # 24 hours in milliseconds

# SpringDoc OpenAPI configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    docExpansion: none
    disable-swagger-default-url: true
    display-request-duration: true
  packages-to-scan: com.streamflix.video.presentation

# Multi-tenancy and enterprise features configuration
app:
  multitenancy:
    enabled: true
    default-tenant-id: 00000000-0000-0000-0000-000000000000
    header-name: X-Tenant-ID
  
  partitioning:
    enabled: true
    partition-size: 100
    
  archiving:
    enabled: true
    default-retention-days: 365
    deleted-retention-days: 30
    schedule: "0 0 2 * * *"  # 2 AM every day
    
  gdpr:
    enabled: true
    data-export:
      expiry-hours: 24
    right-to-be-forgotten:
      grace-period-days: 30
      
  # S3 bucket configuration for archiving
  archive:
    bucket: streamflix-archive
    
  video:
    bucket: streamflix-videos

# Resilience4j configuration
resilience4j:
    circuitbreaker:
        instances:
            s3Service:
                registerHealthIndicator: true
                slidingWindowSize: 10
                failureRateThreshold: 50
                waitDurationInOpenState: 10000
            transcodingService:
                registerHealthIndicator: true
                slidingWindowSize: 10
                failureRateThreshold: 50
                waitDurationInOpenState: 10000 # 10s
                permittedNumberOfCallsInHalfOpenState: 5
                automaticTransitionFromOpenToHalfOpenEnabled: true
            searchService:
                registerHealthIndicator: true
                slidingWindowSize: 10
                failureRateThreshold: 50
                waitDurationInOpenState: 10000 # 10s
                permittedNumberOfCallsInHalfOpenState: 5
                automaticTransitionFromOpenToHalfOpenEnabled: true
            userProfileService:
                registerHealthIndicator: true
                slidingWindowSize: 10
                failureRateThreshold: 50
                waitDurationInOpenState: 10000 # 10s
                permittedNumberOfCallsInHalfOpenState: 5
                automaticTransitionFromOpenToHalfOpenEnabled: true
    retry:
        instances:
            s3Service:
                maxRetryAttempts: 3
                waitDuration: 1000 # 1s
                retryExceptions:
                    - java.io.IOException
                    - java.util.concurrent.TimeoutException
                ignoreExceptions:
                    - com.streamflix.video.infrastructure.client.exception.BadRequestException # Example custom exception
            transcodingService:
                maxAttempts: 3
                waitDuration: 1000 # 1s
                retryExceptions:
                    - java.io.IOException
                    - java.util.concurrent.TimeoutException
                ignoreExceptions:
                    - com.streamflix.video.infrastructure.client.exception.BadRequestException # Example custom exception
            searchService:
                maxAttempts: 3
                waitDuration: 1000 # 1s
                retryExceptions:
                    - java.io.IOException
                    - java.util.concurrent.TimeoutException
            userProfileService:
                maxAttempts: 3
                waitDuration: 1000 # 1s
                retryExceptions:
                    - java.io.IOException
                    - java.util.concurrent.TimeoutException
    timelimiter:
        instances:
            transcodingService:
                timeoutDuration: 5s # 5 seconds
                cancelRunningFuture: true
            searchService:
                timeoutDuration: 3s # 3 seconds
                cancelRunningFuture: true
            userProfileService:
                timeoutDuration: 2s # 2 seconds
                cancelRunningFuture: true

# Service discovery configuration
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
    registerWithEureka: true
    fetchRegistry: true
  instance:
    preferIpAddress: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}