FROM gradle:8.5-jdk21 AS builder
WORKDIR /app

# Copy gradle build files first to leverage layer caching
COPY build.gradle.kts settings.gradle.kts gradlew ./
COPY gradle ./gradle

# Run initial download of dependencies (will be cached if no changes)
RUN --mount=type=cache,target=/home/gradle/.gradle ./gradlew dependencies --no-daemon

# Copy source files
COPY . .

# Build the application
RUN --mount=type=cache,target=/home/gradle/.gradle ./gradlew build --no-daemon

# Runtime image
FROM eclipse-temurin:21-jre-jammy
WORKDIR /app

# Default environment variables for production
ENV SPRING_PROFILES_ACTIVE=prod \
    # JVM options for production
    JAVA_OPTS="-XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -Dserver.tomcat.max-threads=200 -Dserver.tomcat.min-spare-threads=20" \
    # Graceful shutdown settings
    SERVER_SHUTDOWN=graceful \
    SPRING_LIFECYCLE_TIMEOUT-PER-SHUTDOWN-PHASE=30s

# Install necessary tools for health checks and container setup
RUN apt-get update && apt-get install -y curl netcat-openbsd jq && \
    rm -rf /var/lib/apt/lists/*

# Copy built application from builder
COPY --from=builder /app/build/libs/*.jar app.jar

# Copy wait-for-it script for initialization
COPY wait-for-it.sh /wait-for-it.sh
RUN chmod +x /wait-for-it.sh

# Expose application port
EXPOSE 8080

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health/liveness || exit 1

# Add startup script
COPY --chmod=755 <<-"EOF" /docker-entrypoint.sh
#!/bin/sh
set -e

# Check if we need to wait for dependencies
if [ -n "$WAIT_FOR_HOST" ] && [ -n "$WAIT_FOR_PORT" ]; then
  echo "Waiting for $WAIT_FOR_HOST:$WAIT_FOR_PORT..."
  /wait-for-it.sh $WAIT_FOR_HOST:$WAIT_FOR_PORT --timeout=120
fi

# Execute the application with configured options
exec java $JAVA_OPTS -jar app.jar
EOF

ENTRYPOINT ["/docker-entrypoint.sh"]
