name: GitOps Workflow

on:
  push:
    paths:
      - 'kubernetes/**'
    branches:
      - main
      - 'release/**'
  pull_request:
    paths:
      - 'kubernetes/**'
    branches:
      - main
      - 'release/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  FLUX_VERSION: 2.0.0

jobs:
  validate-manifests:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
      
      - name: Validate Kustomize Build - Dev
        run: kustomize build kubernetes/overlays/dev > /tmp/dev-manifests.yaml
      
      - name: Validate Kustomize Build - Staging
        run: kustomize build kubernetes/overlays/staging > /tmp/staging-manifests.yaml
      
      - name: Validate Kustomize Build - Prod
        run: kustomize build kubernetes/overlays/prod > /tmp/prod-manifests.yaml
      
      - name: Install Kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo cp kubeval /usr/local/bin
      
      - name: Validate Kubernetes Manifests
        run: |
          kubeval /tmp/dev-manifests.yaml
          kubeval /tmp/staging-manifests.yaml
          kubeval /tmp/prod-manifests.yaml

  gitops-sync:
    name: Sync GitOps Repository
    runs-on: ubuntu-latest
    needs: validate-manifests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@v2
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Clone GitOps Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/streamflix-gitops
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops-repo
      
      - name: Determine Environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Update GitOps Repository
        run: |
          ENV=${{ steps.determine-env.outputs.environment }}
          echo "Syncing $ENV environment"
          
          mkdir -p gitops-repo/clusters/$ENV/streamflix-auth
          
          # Generate manifests with Kustomize
          kustomize build kubernetes/overlays/$ENV > gitops-repo/clusters/$ENV/streamflix-auth/manifests.yaml
          
          cd gitops-repo
          
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "Update streamflix-auth manifests for $ENV environment [skip ci]"
            git push
          else
            echo "No changes detected, skipping push"
          fi
      
      - name: Verify Flux sync
        if: success()
        run: |
          ENV=${{ steps.determine-env.outputs.environment }}
          
          # Configure Kubernetes access
          aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }}-$ENV --region ${{ vars.AWS_REGION }}
          
          # Wait for Flux to reconcile
          flux reconcile kustomization streamflix-auth --wait=2m
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  post-deployment-tests:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: gitops-sync
    if: success()
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Determine Environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Update Kubernetes Config
        run: |
          ENV=${{ steps.determine-env.outputs.environment }}
          aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }}-$ENV --region ${{ vars.AWS_REGION }}
      
      - name: Verify Deployment Status
        run: |
          ENV=${{ steps.determine-env.outputs.environment }}
          NAMESPACE=streamflix-$ENV
          PREFIX=${ENV}-
          
          # Check deployment status
          kubectl rollout status deployment/${PREFIX}streamflix-auth -n $NAMESPACE
          
          # Check pod health
          kubectl get pods -l app=${PREFIX}streamflix-auth -n $NAMESPACE -o wide
          
          # Check service status
          kubectl get svc ${PREFIX}streamflix-auth -n $NAMESPACE
      
      - name: Run Health Check
        run: |
          ENV=${{ steps.determine-env.outputs.environment }}
          NAMESPACE=streamflix-$ENV
          PREFIX=${ENV}-
          
          # Forward port for health check
          kubectl port-forward svc/${PREFIX}streamflix-auth -n $NAMESPACE 8080:80 &
          sleep 5
          
          # Check health endpoint
          curl -f http://localhost:8080/health || exit 1
          
          # Check readiness endpoint
          curl -f http://localhost:8080/health/ready || exit 1