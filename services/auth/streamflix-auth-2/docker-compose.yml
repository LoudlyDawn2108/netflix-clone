version: '3.8'

services:
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: streamflix-auth-service
    restart: always
    ports:
      - '3000:3000'
    environment:
      - PORT=3000
      - NODE_ENV=development
      - API_PREFIX=api
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=streamflix_auth
      - DB_SCHEMA=public
      - DB_SYNCHRONIZE=true
      - DB_LOGGING=true
      - DB_CONNECTION_POOL_SIZE=20
      - JWT_SECRET=secret_key_change_in_production
      - JWT_ACCESS_EXPIRATION=3600
      - JWT_REFRESH_EXPIRATION=604800
      - PASSWORD_HASH_ROUNDS=12
      - RATE_LIMIT_TTL=60
      - RATE_LIMIT_MAX=100
    depends_on:
      - postgres
      - redis
    networks:
      - streamflix-network

  postgres:
    image: postgres:16-alpine
    container_name: streamflix-auth-postgres
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: streamflix_auth
    volumes:
      - streamflix-auth-postgres-data:/var/lib/postgresql/data
    networks:
      - streamflix-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: streamflix-auth-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --requirepass redis
    volumes:
      - streamflix-auth-redis-data:/data
    networks:
      - streamflix-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  streamflix-network:
    driver: bridge

volumes:
  streamflix-auth-postgres-data:
  streamflix-auth-redis-data:
