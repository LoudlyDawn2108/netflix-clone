// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Streamflix.Transcoding.Infrastructure.Data;

#nullable disable

namespace Streamflix.Transcoding.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TranscodingDbContext))]
    partial class TranscodingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Streamflix.Transcoding.Core.Entities.Rendition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Bitrate")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OutputPath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TranscodingJobId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TranscodingJobId")
                        .HasDatabaseName("IX_Renditions_TranscodingJobId");

                    b.ToTable("renditions", (string)null);
                });

            modelBuilder.Entity("Streamflix.Transcoding.Core.Entities.TranscodingJob", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("InputPath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("OutputBasePath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TenantId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_TranscodingJobs_Status");

                    b.HasIndex("VideoId")
                        .IsUnique()
                        .HasDatabaseName("IX_TranscodingJobs_VideoId");

                    b.ToTable("transcoding_jobs", (string)null);
                });

            modelBuilder.Entity("Streamflix.Transcoding.Core.Entities.Rendition", b =>
                {
                    b.HasOne("Streamflix.Transcoding.Core.Entities.TranscodingJob", "TranscodingJob")
                        .WithMany("Renditions")
                        .HasForeignKey("TranscodingJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TranscodingJob");
                });

            modelBuilder.Entity("Streamflix.Transcoding.Core.Entities.TranscodingJob", b =>
                {
                    b.Navigation("Renditions");
                });
#pragma warning restore 612, 618
        }
    }
}
